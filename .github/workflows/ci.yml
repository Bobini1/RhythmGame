name: Continuous Integration

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with: { python-version: "3.8" }

      - name: Install codespell
        run: pip3 install codespell

      - name: Lint
        run: cmake -D FORMAT_COMMAND=clang-format-12 -P cmake/lint.cmake

      - name: Spell check
        if: always()
        run: cmake -P cmake/spell.cmake

  coverage:
    needs: [ lint ]

    runs-on: ubuntu-latest

    if: github.repository_owner == 'Bobini1'

    steps:
      - uses: actions/checkout@v2

      - name: Install LCov
        run: sudo apt-get update -q
          && sudo apt-get install lcov -q -y

      - name: Install Python
        uses: actions/setup-python@v2
        with: { python-version: "3.8" }

      - name: Install system dependencies
        run: sudo apt-get install libudev-dev libgl-dev -y

      - name: Cache conan
        id: cache-conan
        uses: actions/cache@v3.0.5
        with:
          path: ~/.conan/data
          key: conan-packages-coverage

      - name: Install dependencies
        run: pip3 install "conan==1.51.3"
          && conan profile new default --detect
          && conan profile update settings.compiler.libcxx=libstdc++11 default
          && conan install . -b missing

      - name: Configure
        run: cmake --preset=ci-coverage

      - name: Build
        run: cmake --build build/coverage -j 2

      - name: Test
        working-directory: build/coverage
        run: ctest --output-on-failure -j 2

      - name: Process coverage info
        run: cmake --build build/coverage -t coverage

      - name: Submit to codecov.io
        uses: codecov/codecov-action@v1
        with:
          file: build/coverage/coverage.info

  sanitize:
    needs: [ lint ]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v2
        with: { python-version: "3.8" }

      - name: Install system dependencies
        run: sudo apt-get install libudev-dev libgl-dev -y

      - name: Install Clang 12
        run: sudo apt update && sudo apt install clang-12

      - name: Cache conan
        id: cache-conan
        uses: actions/cache@v3.0.5
        with:
          path: ~/.conan/data
          key: conan-packages-sanitize

      - name: Install dependencies
        env: { CXX: clang++-12 }
        run: pip3 install "conan==1.51.3"
          && conan profile new default --detect
          && cp .github/clang-12.profile ~/.conan/profiles/default
          && conan install . -b missing

      - name: Configure
        env: { CXX: clang++-12 }
        run: cmake --preset=ci-sanitize

      - name: Build
        run: cmake --build build/sanitize -j 2

      - name: Test
        working-directory: build/sanitize
        env:
          ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
          UBSAN_OPTIONS: print_stacktrace=1
        run: ctest --output-on-failure -j 2

  test:
    needs: [ lint ]

    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install static analyzers
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install clang-tidy cppcheck -y -q

      - name: Install Python
        uses: actions/setup-python@v2
        with: { python-version: "3.8" }

      - name: Install system dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libudev-dev libgl-dev -y

      - name: Cache conan
        id: cache-conan
        uses: actions/cache@v3.0.5
        with:
          path: ~/.conan/data
          key: conan-packages-${{ matrix.os }}-v2

      - name: Cache conan extra exports
        if: matrix.os == 'windows-latest'
        id: cache-conan-exports
        uses: actions/cache@v3.0.5
        with:
          path: C:/.conan
          key: conan-exports-extra-windows

      - name: Install dependencies
        shell: bash
        run: |
          pip3 install "conan==1.51.3"
          conan profile new default --detect --force
          if [ ${{ matrix.os }} = ubuntu-latest ]; then
            conan profile update settings.compiler.libcxx=libstdc++11 default
          fi
          if [ ${{ matrix.os }} = macos-latest ]; then
            conan create ./recipes/luajit/all/ 2.0.5@ -s build_type=Debug
          fi
          conan install . -b missing

      - name: Configure
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

      - name: Build
        run: cmake --build build --config Release -j 2

      - name: Install
        run: cmake --install build --config Release --prefix prefix

      - name: Test
        working-directory: build
        run: ctest --output-on-failure -C Release -j 2

  docs:
    # Deploy docs only when builds succeed
    needs: [ sanitize, test ]

    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/master'
      && github.event_name == 'push'
      && github.repository_owner == 'Bobini1'

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with: { python-version: "3.8" }

      - name: Install m.css dependencies
        run: pip3 install jinja2 Pygments

      - name: Install Doxygen
        run: sudo apt-get update -q
          && sudo apt-get install doxygen -q -y

      - name: Build docs
        run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
          -P cmake/docs-ci.cmake

      - name: Deploy docs
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/docs/html
