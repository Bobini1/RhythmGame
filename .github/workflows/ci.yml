name: Continuous Integration

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

env:
  VCPKG_COMMIT: "101cc9a69a1061969caf4b73579a34873fdd60fe"
  LDFLAGS: "-fuse-ld=mold"

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with: { python-version: "3.8" }

      - name: Install codespell
        run: pip3 install codespell

      - name: Lint
        run: cmake -D FORMAT_COMMAND=clang-format-14 -P cmake/lint.cmake

      - name: Spell check
        if: always()
        run: cmake -P cmake/spell.cmake

  coverage:
    needs: [ lint ]

    runs-on: ubuntu-bobini

    if: github.repository_owner == 'Bobini1'

    env:
      VCPKG_ROOT: /home/bobini/vcpkg

    steps:
      - uses: actions/checkout@v4

      - name: Install LCov
        run: sudo apt-get update -q
          && sudo apt-get install lcov -q -y

      - name: Install system dependencies
        run: sudo apt-get install libtbb-dev libgl-dev libdrm-dev libgles2-mesa-dev libudev-dev nasm autoconf automake autoconf-archive gperf pkg-config python3-jinja2 '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev -y

      - name: Configure
        run: cmake --preset=ci-coverage

      - name: Build
        run: cmake --build build/coverage -j 2

      - name: Test
        working-directory: build/coverage
        run: ctest --output-on-failure -j 2

      - name: Process coverage info
        run: cmake --build build/coverage -t coverage

      - name: Submit to codecov.io
        uses: codecov/codecov-action@v3
        with:
          files: build/coverage/coverage.info

  sanitize:
    needs: [ lint ]

    env:
      CXX: clang++-17
      CC: clang-17
      VCPKG_ROOT: /home/bobini/vcpkg

    runs-on: ubuntu-bobini

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install libtbb-dev libgl-dev libdrm-dev libgles2-mesa-dev libudev-dev nasm autoconf automake autoconf-archive gperf pkg-config python3-jinja2 '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev -y

      - name: Install Clang 17
        run: sudo apt-get install clang-17 libc++-dev -y

      - name: Configure
        run: cmake --preset=ci-sanitize

      - name: Build
        run: cmake --build build/sanitize -j 2

      - name: Test
        working-directory: build/sanitize
        env:
          ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
          UBSAN_OPTIONS: print_stacktrace=1
        run: ctest --output-on-failure -j 2

  test:
    needs: [ lint ]

    strategy:
      matrix:
        os: [ #macos-12,
          ubuntu-bobini, windows-bobini ]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install static analyzers
        if: matrix.os == 'ubuntu-bobini'
        run: >-
          sudo apt-get install clang-tidy-17 cppcheck -y -q
          
          sudo update-alternatives --install
          /usr/bin/clang-tidy clang-tidy
          /usr/bin/clang-tidy-14 170

      - name: Install vcpkg
        if: matrix.os == 'macos-12'
        uses: friendlyanon/setup-vcpkg@v1
        with: { committish: "${{ env.VCPKG_COMMIT }}" }

      - name: Set VCPKG_ROOT Windows
        if: matrix.os == 'windows-bobini'
        run: echo "VCPKG_ROOT=K:/v" >> $GITHUB_ENV

      - name: Set VCPKG_ROOT Ubuntu
        if: matrix.os == 'ubuntu-bobini'
        run: echo "VCPKG_ROOT=/home/bobini/vcpkg" >> $GITHUB_ENV

      - name: Setup MultiToolTask
        if: matrix.os == 'windows-bobini'
        run: |
          Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
          Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

      - name: Install system dependencies
        if: matrix.os == 'ubuntu-bobini' || matrix.os == 'macos-12'
        shell: bash
        run: |
          if [ ${{ matrix.os }} = ubuntu-bobini ]; then
            sudo apt-get update && sudo apt-get install libtbb-dev libgl-dev libdrm-dev libgles2-mesa-dev libudev-dev nasm autoconf automake autoconf-archive gperf pkg-config python3-jinja2 '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev -y
          else
            brew install autoconf automake autoconf-archive
          fi

      - name: Configure
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

      - name: Build
        run: cmake --build build --config Release -j 2

      - name: Install
        run: cmake --install build --config Release --prefix ${{ github.workspace }}/prefix

      - name: Test
        working-directory: build
        run: ctest --output-on-failure -C Release -j 2

  deploy:
    needs: [ sanitize, test ]

    strategy:
      matrix:
        os: [ #macos-12,
          ubuntu-bobini, windows-bobini ]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install static analyzers
        if: matrix.os == 'ubuntu-bobini'
        run: >-
          sudo apt-get install clang-tidy-14 cppcheck -y -q
          
          sudo update-alternatives --install
          /usr/bin/clang-tidy clang-tidy
          /usr/bin/clang-tidy-14 140

      - name: Install vcpkg
        if: matrix.os == 'macos-12'
        uses: friendlyanon/setup-vcpkg@v1
        with: { committish: "${{ env.VCPKG_COMMIT }}" }

      - name: Set VCPKG_ROOT Windows
        if: matrix.os == 'windows-bobini'
        run: echo "VCPKG_ROOT=K:/v" >> $GITHUB_ENV

      - name: Set VCPKG_ROOT Ubuntu
        if: matrix.os == 'ubuntu-bobini'
        run: echo "VCPKG_ROOT=/home/bobini/vcpkg" >> $GITHUB_ENV

      - name: Install system dependencies
        if: matrix.os == 'ubuntu-bobini' || matrix.os == 'macos-12'
        shell: bash
        run: |
          if [ ${{ matrix.os }} = ubuntu-bobini ]; then
            sudo apt-get update && sudo apt-get install libtbb-dev libgl-dev libdrm-dev libgles2-mesa-dev libudev-dev nasm autoconf automake autoconf-archive gperf pkg-config python3-jinja2 '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev -y
          else
            brew install autoconf automake autoconf-archive
          fi

      - name: Configure
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

      - name: Build
        run: cmake --build build --config Release -j 2

      - name: Package
        working-directory: build
        run: cpack -B artifacts --config CPackConfig.cmake

      - name: Remove CPack folders
        working-directory: build
        shell: bash
        run: rm -rf ./artifacts/_CPack_Packages

      - name: Upload Binary
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}
          path: ${{ github.workspace }}/build/artifacts/
          if-no-files-found: error
  
  docs:
    # Deploy docs only when builds succeed
    needs: [ sanitize, test ]

    runs-on: ubuntu-bobini

    if: github.ref == 'refs/heads/master'
      && github.event_name == 'push'
      && github.repository_owner == 'Bobini1'

    steps:
      - uses: actions/checkout@v4

      - name: Install Doxygen
        run: sudo apt-get update -q
          && sudo apt-get install doxygen -q -y

      - name: Build docs
        run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
          -P cmake/docs-ci.cmake

      - name: Deploy docs
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/docs/html
