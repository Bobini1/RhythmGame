name: Continuous Integration

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

permissions:
  packages: write

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Lint
        run: cmake -P cmake/lint.cmake

  coverage:
    runs-on: ubuntu-latest

    if: github.repository_owner == 'Bobini1'

    steps:
      - uses: actions/checkout@v4

      - name: Install LCov
        run: sudo apt-get update -q
          && sudo apt-get install lcov -q -y

      - name: Install system dependencies
        run: sudo apt-get install libtbb-dev libgl-dev libdrm-dev libgles2-mesa-dev libudev-dev nasm autoconf automake autoconf-archive gperf pkg-config python3-jinja2 '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev libltdl-dev libxrandr-dev mono-complete -y

      - name: Export environment variables for vcpkg binary caching
        if: matrix.options.loadtests != 'OFF'
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('VCPKG_ROOT', process.env.VCPKG_INSTALLATION_ROOT || '');
            core.exportVariable('VCPKG_EXE', process.env.VCPKG_INSTALLATION_ROOT + '/vcpkg' || '');
            core.exportVariable('NUGET_NUGET_FEED_URL', 'https://nuget.pkg.github.com/Bobini1/index.json' || '');

      - name: Add NuGet sources
        shell: bash
        run: |
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            sources add \
            -Source "${{ env.NUGET_FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.GITHUB_TOKEN }}"
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            setapikey "${{ secrets.GITHUB_TOKEN }}" \
            -Source "${{ env.NUGET_FEED_URL }}"

      - name: Configure
        run: cmake --preset=ci-coverage

      - name: Build
        run: cmake --build build/coverage -j 2

      - name: Test
        working-directory: build/coverage
        run: |
          export DISPLAY=:99
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 -noreset > /dev/null 2>&1 &
          ctest --output-on-failure -j 2

      - name: Process coverage info
        run: cmake --build build/coverage -t coverage

      - name: Submit to codecov.io
        uses: codecov/codecov-action@v3
        with:
          files: build/coverage/coverage.info

  sanitize:
    env:
      CXX: clang++
      CC: clang

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: sudo apt-get install libtbb-dev libgl-dev libdrm-dev libgles2-mesa-dev libudev-dev nasm autoconf automake autoconf-archive gperf pkg-config python3-jinja2 '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev libltdl-dev libxrandr-dev mono-complete -y

      - name: Export environment variables for vcpkg binary caching
        if: matrix.options.loadtests != 'OFF'
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('VCPKG_ROOT', process.env.VCPKG_INSTALLATION_ROOT || '');
            core.exportVariable('VCPKG_EXE', process.env.VCPKG_INSTALLATION_ROOT + '/vcpkg' || '');
            core.exportVariable('NUGET_NUGET_FEED_URL', 'https://nuget.pkg.github.com/Bobini1/index.json' || '');

      - name: Add NuGet sources
        shell: bash
        run: |
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            sources add \
            -Source "${{ env.NUGET_FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.GITHUB_TOKEN }}"
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            setapikey "${{ secrets.GITHUB_TOKEN }}" \
            -Source "${{ env.NUGET_FEED_URL }}"

      - name: Install Clang 13
        run: sudo apt-get install clang libc++-dev -y

      - name: Configure
        run: cmake --preset=ci-sanitize

      - name: Build
        run: cmake --build build/sanitize -j 2

      - name: Test
        working-directory: build/sanitize
        env:
          ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
          UBSAN_OPTIONS: print_stacktrace=1
        run: |
          export DISPLAY=:99
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 -noreset > /dev/null 2>&1 &
          ctest --output-on-failure -j 2

  test:
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install static analyzers
        if: matrix.os == 'ubuntu-latest'
        run: >-
          sudo apt-get install clang-tidy-19 cppcheck -y -q
          
          sudo update-alternatives --install
          /usr/bin/clang-tidy clang-tidy
          /usr/bin/clang-tidy-19 190

      - name: Setup MultiToolTask
        if: matrix.os == 'windows-latest'
        run: |
          Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
          Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

      - name: Install WMF
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: Install-WindowsFeature Server-Media-Foundation

      - name: Install system dependencies
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        shell: bash
        run: |
          if [ ${{ matrix.os }} = ubuntu-latest ]; then
            sudo apt-get update && sudo apt-get install libtbb-dev libgl-dev libdrm-dev libgles2-mesa-dev libudev-dev nasm autoconf automake autoconf-archive gperf pkg-config python3-jinja2 '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev libltdl-dev libxrandr-dev -y
          else
            brew install autoconf automake autoconf-archive libtool
          fi
          
      - name: Free disk space
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
          sudo rm -rf \
            /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
            /usr/lib/jvm || true
          echo "some directories deleted"
          sudo apt install aptitude -y >/dev/null 2>&1
          sudo aptitude purge aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org azure-cli microsoft-edge-stable \
            -y -f >/dev/null 2>&1
          sudo aptitude purge google-cloud-sdk -f -y >/dev/null 2>&1
          sudo aptitude purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo apt purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo aptitude purge '~n ^mysql' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^php' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^dotnet' -f -y >/dev/null 2>&1
          sudo apt-get autoremove -y >/dev/null 2>&1
          sudo apt-get autoclean -y >/dev/null 2>&1
          echo "some packages purged"

      - name: Export environment variables for vcpkg binary caching
        if: matrix.options.loadtests != 'OFF'
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('VCPKG_ROOT', process.env.VCPKG_INSTALLATION_ROOT || '');
            core.exportVariable('VCPKG_EXE', process.env.VCPKG_INSTALLATION_ROOT + '/vcpkg' || '');
            core.exportVariable('NUGET_NUGET_FEED_URL', 'https://nuget.pkg.github.com/Bobini1/index.json' || '');

      - name: Add NuGet sources
        shell: bash
        run: |
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            sources add \
            -Source "${{ env.NUGET_FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.GITHUB_TOKEN }}"
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            setapikey "${{ secrets.GITHUB_TOKEN }}" \
            -Source "${{ env.NUGET_FEED_URL }}"

      - name: Configure
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

      - name: Build
        run: cmake --build build --config Release -j 2

      - name: Install
        shell: bash
        run: cmake --install build --config Release --prefix $PWD/prefix

      - name: Test
        working-directory: build
        shell: bash
        run: |
          if [ ${{ matrix.os }} = ubuntu-latest ]; then
            export DISPLAY=:99
            sudo Xvfb -ac :99 -screen 0 1280x1024x24 -noreset > /dev/null 2>&1 &
            ctest --output-on-failure -C Release -j 2
          else
            ctest --output-on-failure -C Release -j 2
          fi

  deploy:
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install static analyzers
        if: matrix.os == 'ubuntu-latest'
        run: >-
          sudo apt-get install clang-tidy-19 cppcheck -y -q
          
          sudo update-alternatives --install
          /usr/bin/clang-tidy clang-tidy
          /usr/bin/clang-tidy-19 190

      - name: Install WMF
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: Install-WindowsFeature Server-Media-Foundation

      - name: Install system dependencies
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        shell: bash
        run: |
          if [ ${{ matrix.os }} = ubuntu-latest ]; then
            sudo apt-get update && sudo apt-get install libtbb-dev libgl-dev libdrm-dev libgles2-mesa-dev libudev-dev nasm autoconf automake autoconf-archive gperf pkg-config python3-jinja2 '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev libltdl-dev libxrandr-dev mono-complete -y
          else
            brew install autoconf automake autoconf-archive libtool
          fi

      - name: Free disk space
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
          sudo rm -rf \
            /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
            /usr/lib/jvm || true
          echo "some directories deleted"
          sudo apt install aptitude -y >/dev/null 2>&1
          sudo aptitude purge aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org azure-cli microsoft-edge-stable \
            -y -f >/dev/null 2>&1
          sudo aptitude purge google-cloud-sdk -f -y >/dev/null 2>&1
          sudo aptitude purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo apt purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo aptitude purge '~n ^mysql' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^php' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^dotnet' -f -y >/dev/null 2>&1
          sudo apt-get autoremove -y >/dev/null 2>&1
          sudo apt-get autoclean -y >/dev/null 2>&1
          echo "some packages purged"

      - name: Export environment variables for vcpkg binary caching
        if: matrix.options.loadtests != 'OFF'
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('VCPKG_ROOT', process.env.VCPKG_INSTALLATION_ROOT || '');
            core.exportVariable('VCPKG_EXE', process.env.VCPKG_INSTALLATION_ROOT + '/vcpkg' || '');
            core.exportVariable('NUGET_NUGET_FEED_URL', 'https://nuget.pkg.github.com/Bobini1/index.json' || '');

      - name: Add NuGet sources
        shell: bash
        run: |
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            sources add \
            -Source "${{ env.NUGET_FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.GITHUB_TOKEN }}"
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            setapikey "${{ secrets.GITHUB_TOKEN }}" \
            -Source "${{ env.NUGET_FEED_URL }}"

      - name: Configure
        shell: pwsh
        run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

      - name: Build
        run: cmake --build build --config Release -j 2

      - name: Package
        working-directory: build
        run: cpack -B artifacts --config CPackConfig.cmake

      - name: Remove CPack folders
        working-directory: build
        shell: bash
        run: rm -rf ./artifacts/_CPack_Packages

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: ${{ github.workspace }}/build/artifacts/
          if-no-files-found: error

  docs:
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/master'
      && github.event_name == 'push'
      && github.repository_owner == 'Bobini1'

    steps:
      - uses: actions/checkout@v4

      - name: Install Doxygen and graphviz
        run: sudo apt-get update -q
          && sudo apt-get install doxygen graphviz -q -y

      - name: Build docs
        run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
          -P cmake/docs-ci.cmake

      - name: Deploy docs
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/docs/html